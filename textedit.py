#!/usr/bin/env python 
# simple text editor
# -*- coding: utf-8 -*- 

import curses
import re 
import unittest

from syntaxclass import SyntaxClass
from window import Window
from textbuffer import LogBuffer, FileBuffer

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------

def screen_caret(screen, x, y):
   screen.move(y, x)

def get_point(window=None):
   if window:
      return window.caret()
   else:
      return curses.getsyx()[::-1]

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------

def main(screen):

   # setup the basic syntax for text files
   text_syntax = SyntaxClass("basic")
   text_syntax.add("character", r".")
   text_syntax.add("word", r" ")
   text_syntax.add("sentance", r"\.")

   # make the main window 
   mainwin = Window(screen, FileBuffer(open("README.markdown")))
   mainwin.render()

   # the event loop
   while True: 
      event = screen.getch()
      if event == ord("q"): break 
      
      if event == ord("e"): mainwin.clear()
      if event == ord("r"): mainwin.render()
      if event == ord("f"): mainwin.addstr("X")
      if event == ord("w"): mainwin.rmove(0, -1)
      if event == ord("a"): mainwin.rmove(-1, 0)
      if event == ord("s"): mainwin.rmove(0, +1)
      if event == ord("d"): mainwin.rmove(+1, 0)
      if event == ord("x"): mainwin.here()

      
      def find(syntaxname):
         return lambda t, x, y: text_syntax.find(syntaxname, t, x, y)

      if event == ord("c"): mainwin.movef(find("character"))
      if event == ord("v"): mainwin.movef(find("word"))

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------

if __name__ == '__main__':
    curses.wrapper(main)






















































































































































































































































































































































































































































































































































































































































